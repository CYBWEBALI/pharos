#!/usr/bin/env groovy

SGK_APP = 'pharos'
EKS_CLUSTER = (env.ENVIRONMENT == 'prod') ? 'production' : 'integration'
DOCKER_REGISTRY = params.DOCKER_REGISTRY.toString()

def label = "pharos-${UUID.randomUUID().toString()}"

podTemplate(
    label: label,
    cloud: 'kubernetes',
    containers: [
        containerTemplate(
            name: 'app-builder-deployer',
            image: params.DEPLOYER_IMAGE.toString(),
            command: 'cat',
            ttyEnabled: true
        ),
    ],
    volumes: [
        hostPathVolume(
            mountPath: '/var/run/docker.sock',
            hostPath: '/var/run/docker.sock'
        ),
        hostPathVolume(
            mountPath: '/dev/shm',
            hostPath: '/dev/shm'
        )
    ]
) {
    node(label) {
        try {
            def code = checkout(scm)

            DOCKER_IMAGE_NAME = "${DOCKER_REGISTRY}/${SGK_APP}"
            DOCKER_ARTIFACT = "${DOCKER_IMAGE_NAME}:${code.GIT_COMMIT}"
            SIDECAR_IMAGE = params.SIDECAR_IMAGE.toString()
            UPPY_IMAGE = params.UPPY_IMAGE.toString()
            REGION = params.REGION.toString()
            println "Deploying commit: ${code.GIT_COMMIT}"

            container('app-builder-deployer') {
                stage('Build Docker image') {
                    GATSBY_IMAGE = params.GATSBY_IMAGE.toString()
                    NGINX_IMAGE = params.NGINX_IMAGE.toString()
                    sh(script: "docker build -f k8s/site/Dockerfile -t ${DOCKER_ARTIFACT} --build-arg GATSBY_IMAGE=${GATSBY_IMAGE} --build-arg NGINX_IMAGE=${NGINX_IMAGE} --network container:\$(docker ps | grep \$(hostname) | grep k8s_POD | cut -d\" \" -f1) .")
                }

                stage('Publish Docker image') {
                    sh(script: "docker push ${DOCKER_ARTIFACT}")
                }

                stage('Deploy application') {
                    initiateK8s(env.ENVIRONMENT, SGK_APP)
                }
            }
        } catch (error) {
            println "Caught an err: ${error}"
            currentBuild.result = 'FAILURE'
        }
    }
}

def initiateK8s(ENVIRONMENT='test', APP_NAME='') {
    deploymentConfigurationFile = 'k8s/site/deployment.yml'
    deploymentConfiguration = readFile(deploymentConfigurationFile)
    deploymentConfiguration = deploymentConfiguration.replaceAll('##DOCKER_ARTIFACT##', DOCKER_ARTIFACT)
    deploymentConfiguration = deploymentConfiguration.replaceAll('##SIDECAR_IMAGE##', SIDECAR_IMAGE)
    deploymentConfiguration = deploymentConfiguration.replaceAll('##UPPY_IMAGE##', UPPY_IMAGE)
    deploymentConfiguration = deploymentConfiguration.replaceAll('##REGION##', REGION)
    writeFile(file: deploymentConfigurationFile, text: deploymentConfiguration)
    sh "sagoku.sh apply -c ${EKS_CLUSTER} -f ${deploymentConfigurationFile}"

    println "Checking ${APP_NAME} deployment status..."

    sh "sagoku.sh get -c ${EKS_CLUSTER} -d ${APP_NAME}"
}
